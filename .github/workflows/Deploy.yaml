name: Deploy the application on GKE cluster

on:
    workflow_call:
        inputs:
          namespace:
            default: dev
            description: "Environment on which application needs to be deployed"
            type: string
            required: true
          IMAGE_TAG:
            default: v1
            description: "Provide the input value for image tag"
            type: string
            required: true

jobs:
    
    Deploy: 
        env:
          IMAGE_TAG: ${{ inputs.IMAGE_TAG }}      
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Authenticate to GCP account
              uses: 'google-github-actions/auth@v2'
              with:
                project_id: ${{ secrets.PROJECTID }}
                workload_identity_provider: ${{ secrets.workload_identity_provider }}
                service_account: ${{ secrets.service_account }}

            - name: 'Set up Cloud SDK'
              uses: 'google-github-actions/setup-gcloud@v2'
              with:
                version: '>= 363.0.0'
            - name: Install the gcloud and kubectl and also deploy the app using helm
              run: |
                
                # IMAGE_TAG=${{ inputs.IMAGE_TAG }}
                echo $IMAGE_TAG
                gcloud --version
                gcloud components install kubectl
                gcloud container clusters list --project gcp-gke-453620
                gcloud container clusters get-credentials infra-dev-gke-cluster --region europe-west3 --project gcp-gke-453620
                kubectl get nodes
                NAMESPACE="dev"
                if ! kubectl get namespace "$NAMESPACE" >/dev/null 2>&1; then
                  kubectl create namespace "$NAMESPACE"
                fi
                cd helm
                helm version
                helm upgrade -i spring-boot -f values.yaml --set image.tag=${IMAGE_TAG} . --namespace ${{ inputs.namespace }}
                echo "status=OK" >> $GITHUB_ENV

            - name: Output
              if: always()
              run: |
                if [[ "${{ env.status }}" != "OK" ]]; then
                  echo "❌ Deployment failed, please check logs" >> $GITHUB_STEP_SUMMARY
                  exit 1
                else
                  echo "✅ Deployment is success." >> $GITHUB_STEP_SUMMARY
                fi
       
