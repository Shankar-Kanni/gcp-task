name: Spring Boot CI/CD pipeline for GCP/GKE

on:
    push: 
      paths-ignore: 
        - 'README.md'
        - '.github/**'
      branches: 
        - test
    pull_request: 
      branches:
        - main
      types:
        - closed
        - opened
    workflow_dispatch:
      inputs:
        manual:
          default: required
          required: true
            

jobs:
    Build-App-Test:
        permissions: write-all
        runs-on: ubuntu-latest
        outputs:
          VERSION: ${{ steps.jar_version.outputs.VERSION }}
        steps:  
            - name: Checkout Repo
              uses: actions/checkout@v4

            - name: Authenticate to GCP account
              id: auth
              uses: 'google-github-actions/auth@v2'
              with:
                project_id: ${{ secrets.PROJECTID }}
                workload_identity_provider: ${{ secrets.workload_identity_provider }}
                service_account: ${{ secrets.service_account }}
                token_format: access_token
              

            - name: Setup required Java JDK
              uses: actions/setup-java@v4
              with:
                distribution: 'zulu' # See 'Supported distributions' for available options
                java-version: '17'

            - name: 'Set up Cloud SDK'
              uses: 'google-github-actions/setup-gcloud@v2'
              with:
                version: '>= 363.0.0'

            - name: Build SNAPSHOT version and test the application
              if: ${{ github.event.pull_request.merged == false }}
              run: |
                mvn help:evaluate -Dexpression=project.version -q -DforceStdout
                mvn clean install --file pom.xml
                
                cp target/*.jar spring-boot.jar
                docker build --tag spring-boot:${{ github.sha }} .
                docker images
                docker run --name spring-boot-app -d \
                -p 8080:8080 spring-boot:${{ github.sha }}
                echo Testing Image URL using wget 
                wget -q -O - localhost:8080/api/app/health | grep up

            - name: Build the final release version of app and test
              if: ${{ github.event.pull_request.merged == true }}
              run: |
                  mvn clean deploy --file pom.xml

              
            - name: Check the Jar availability on the GCP artifactory
              id: jar_version
              if: ${{ github.event.pull_request.merged == true }}
              run : |
                  cd target
                  VERSION=$(ls *.jar | sed -E 's/.*-(.*)\.jar/\1/')
                  echo "VERSION=$VERSION" >> $GITHUB_ENV
                  echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
                  gcloud artifacts files list --project gcp-gke-453620 --repository java-release --location europe-west3 --package com.example:demo --version ${VERSION}

            - name: Login to Google Artifactory
              if: ${{ github.event.pull_request.merged == true }}
              uses: docker/login-action@v3
              with:
                registry: europe-west3-docker.pkg.dev
                username: oauth2accesstoken
                password: ${{ steps.auth.outputs.access_token }}

            - name: Build docker image and push to Artifactory
              id: docker_image
              if: ${{ github.event.pull_request.merged == true }}
              run: |

                cp target/*.jar spring-boot.jar
                docker build -f Dockerfile --tag "europe-west3-docker.pkg.dev/gcp-gke-453620/docker-repo/spring-boot-app-v1:${VERSION}" .
                docker push europe-west3-docker.pkg.dev/gcp-gke-453620/docker-repo/spring-boot-app-v1:${VERSION}

                docker images
                docker run --name spring-boot-app -d  \
                  -p 8080:8080 \
                  europe-west3-docker.pkg.dev/gcp-gke-453620/docker-repo/spring-boot-app-v1:${VERSION}
                docker ps
                echo Testing Image URL using wget 
                wget -q -O - localhost:8080/api/app/health | grep up

    Comment-PR-on-Success:
      runs-on: ubuntu-latest
      needs: [Build-App-Test]
      permissions:
        issues: write
        pull-requests: write
      if: success() && github.event_name == 'pull_request'
      steps:
        - name: Post a comment if build is successful
          run: |
            pull_request_number=$(jq --raw-output .pull_request.number "$GITHUB_EVENT_PATH")
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"body\": \"### PR - #$pull_request_number. \n ### ✅ Build succeeded! Great job! 🎉 \"}" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments
    
    Comment-PR-on-Failure: 
      runs-on: ubuntu-latest
      needs: [Build-App-Test]
      permissions:
        issues: write
        pull-requests: write
      if: failure() && github.event_name == 'pull_request'
      steps:     
        - name: Post a comment if build fails
          run: |
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"body\": \"### PR - #$pull_request_number. \n ### ❌ Build failed! Please check the logs. 🚨 \"}" \
              https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments
              
                    
    # dockerization:
    #     name: Containerization
    #     needs: [build-spring-boot]
    #     if: ${{ github.event.pull_request.merged == true }}
    #     permissions: write-all
    #     runs-on: ubuntu-latest
    #     env:
    #       IMAGE_TAG: ${{ needs.build-spring-boot.outputs.VERSION }}
    #     outputs:
    #       IMAGE_TAG: ${{ steps.docker_image.outputs.IMAGE_TAG }}
    #     steps:
    #         - name: Checkout Repo
    #           uses: actions/checkout@v4

    #         - name: Authenticate to GCP account
    #           id: auth
    #           uses: 'google-github-actions/auth@v2'
    #           with:
    #             project_id: ${{ secrets.PROJECTID }}
    #             workload_identity_provider: ${{ secrets.workload_identity_provider }}
    #             service_account: ${{ secrets.service_account }}
    #             token_format: access_token

    #         - name: 'Set up Cloud SDK'
    #           uses: 'google-github-actions/setup-gcloud@v2'
    #           with:
    #             version: '>= 363.0.0'

    #         - name: Download the jar file
    #           run: |
                
    #             gcloud artifacts files list --project gcp-gke-453620 --repository java-maven --location europe-west3 --package com.example:demo --version ${IMAGE_TAG} | grep jar | head -1
    #             JAR=$(gcloud artifacts files list --project gcp-gke-453620 --repository java-release --location europe-west3 --package com.example:demo --version 1.0.13 | grep jar | head -1 | sed -E 's/.*\/(demo-[^\/]+\.jar)/\1/' | awk '{print $1}') >> $GITHUB_ENV
    #             echo $JAR
                
    #             URL="https://artifactregistry.googleapis.com/download/v1/projects/gcp-gke-453620/locations/europe-west3/repositories/java-release/files/com%2Fexample%2Fdemo#${IMAGE_TAG}#demo-${IMAGE_TAG}.jar:download?alt=media"
    #             echo $URL | sed 's/#/%2F/g'
    #             curl -X GET -k -H "Authorization: Bearer $(gcloud auth print-access-token)" --output spring-boot.jar -k "$(echo $URL | sed 's/#/%2F/g')"

    #             ls -lrth | grep "jar"
            
            
    #         - name: Login to Google Artifactory
    #           uses: docker/login-action@v3
    #           with:
    #             registry: europe-west3-docker.pkg.dev
    #             username: oauth2accesstoken
    #             password: ${{ steps.auth.outputs.access_token }}

    #         - name: Build docker image and push to Artifactory
    #           id: docker_image
    #           run: |
    #             echo $IMAGE_TAG
    #             echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
    #             # gcloud auth configure-docker europe-west3-docker.pkg.dev
    #             # cat ${{ github.workspace }}/gha-creds*.json | base64 | docker login -u _json_key_base64 --password-stdin https://europe-west3-docker.pkg.dev

    #             # IMAGE_TAG=$(cat pom.xml | grep "SNAPSHOT" | sed 's/<version>//g' | awk -F'</version>' '{print $1}'|sed 's/-SNAPSHOT//')
    #             # IMAGE_TAG=$(echo $IMAGE_TAG | sed -e 's/^[ \t]*//')
    #             # echo "IMAGE_TAG=$(echo $IMAGE_TAG | sed -e 's/^[ \t]*//')" >> $GITHUB_OUTPUT
    #             docker build -f Dockerfile --tag "europe-west3-docker.pkg.dev/gcp-gke-453620/docker-repo/spring-boot-app-v1:${IMAGE_TAG}" .
    #             docker push europe-west3-docker.pkg.dev/gcp-gke-453620/docker-repo/spring-boot-app-v1:${IMAGE_TAG}

    #             docker images
    #             docker run --name spring-boot-app -d  \
    #               -p 8080:8080 \
    #               europe-west3-docker.pkg.dev/gcp-gke-453620/docker-repo/spring-boot-app-v1:${IMAGE_TAG}
    #             docker ps
    #             echo Testing Image URL using wget 
    #             wget -q -O - localhost:8080/api/app/health | grep up
                
    deployment_on_dev:
      name: Dev Deployment
      if: ${{ github.event.pull_request.merged == true }}
      # if: github.ref == 'refs/heads/dev' || github.event_name == 'pull_request' && github.base_ref == 'dev'
      needs: [Build-App-Test]
      uses: ./.github/workflows/Deploy.yaml        
      with:
        namespace: dev
        IMAGE_TAG: ${{ needs.Build-App-Test.outputs.VERSION }}
      permissions:
        id-token: write
      secrets: inherit

    # deployment_on_prod:
    #   name: Prod Deployment
    #   if: ${{ github.event.pull_request.merged == true }}
    #   # if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request' && github.base_ref == 'main'
    #   needs: [dockerization]
    #   uses: ./.github/workflows/Deploy.yaml
    #   with:
    #     namespace: prod
    #   permissions:
    #     id-token: write
    #   secrets: inherit
